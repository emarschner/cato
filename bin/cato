#!/usr/bin/env node
var Cato = require('../lib/index.js'),
    fs = require('fs'),
    path = require('path'),
    repl = require('repl'),
    html,
    htmlparser = require('htmlparser'),
    Backbone = require('backbone');

try {
  html = require('html').prettyPrint;
} catch(e) { }



var opts = require('optimist')
    .usage('Usage: $0 --include <file/dir ...>')
    .options({
      'include': {
        describe: 'Path to import.'
      }
    }),
    argv = opts.parse(process.argv);

// output options:
// Transform:
// --exports; require('Cato'), module.exports; in view: .render = require('./view.jade.js');
// --amd; require(['Cato'], function(..) { return ... }; in view: .render = require('./view.jade.js');
// Execute:
// --include <file> --http <file>; HTTP server + single file
// --include <file> --run <file>; run in node

var compiler = Cato.Jade;

if(argv['include']) {
  var file = path.resolve(process.cwd(), argv['include']),
      jsFile = path.dirname(file) + '/' +path.basename(file, '.jade') + '.js',
      hasJsFile = fs.existsSync(jsFile);

  if(!fs.existsSync(file)) {
    console.log('File not found: ' + file);
    process.exit();
  }

  console.log(file, jsFile);

  if(!hasJsFile) {
    // A single file, no .js file of the same name
    var code = compiler.render(compiler.convert(fs.readFileSync(file).toString()));
    console.log('var $ = Cato.Shim;');
    console.log('');
    console.log('function TestView() {};');
    console.log('');
    console.log('Cato.View.mixin(TestView);');
    console.log('');
    console.log('TestView.prototype.render = function() {');
    console.log('  return [\n    ' + code.join(',\n    ')+'\n  ];');
    console.log('};');
    // runner
    console.log('$(jQuery("body")).append(new TestView());');
  } else {
    // File with a .js file of the same name


  }
}

if(argv['run']) {
  var file = path.resolve(process.cwd(), argv['run']),
      instance, model, collection;

  if(path.extname(file) == '.html') {
    var handler = new htmlparser.DefaultHandler(
        function(error, dom) { if(error) throw error; },
        { verbose: false, ignoreWhitespace: true }),
      parser = new htmlparser.Parser(handler),
      value;
    parser.parseComplete(fs.readFileSync(file).toString());

    instance = new Cato.View();
    if(Array.isArray(handler.dom) && handler.dom.length == 1) {
      value = handler.dom[0];
    } else {
      value = Cato.Shim.tag('div', {}, handler.dom);
    }

    // generate a ._render() function
    instance._render = function() {
      if(!value.attribs) {
        value.attribs = {};
      }
      if(!value.attribs.id) {
        value.attribs.id = Cato.Shim.id();
      }
      instance.id = value.attribs.id;
      return value;
    };
  }

  if(path.extname(file) == '.js') {
    // if the extension is .js, do this:
    // 1. require the file
    // 2. instantiate the view
    // 3. convert the instance to HTML
    // can also set --json to a path to a JSON file
    // or a string of JSON
    instance = new (require(file))();
  }

  if(path.extname(file) == '.html' || path.extname(file) == '.js') {

    if(argv['json']) {
      var jsonFile = path.resolve(process.cwd(), argv['json']);
      if(fs.existsSync(jsonFile)) {
        model = require(jsonFile);
      } else {
        try {
          model = JSON.parse(argv['json']);
        } catch(e) {
          console.log('Could not process --json:', argv['json']);
        }
      }
      if(model) {
        if(argv['interactive']) {
          model = new Backbone.Model(model);
        }
        var isCollectionView = !!(instance._childView);
        if(isCollectionView) {
          collection = new Cato.Collection([ model ]);
          console.log(html(Cato.Shim.html(instance)));
          collection.pipe(instance);
        } else {
          instance.bind(model);
        }
      }
    }

    if(!argv['interactive']) {
      // if available, use the prettyprinter
      if(html) {
        console.log(html(Cato.Shim.html(instance)));
      } else {
        console.log(Cato.Shim.html(instance));
      }
    } else {
      console.log('REPL variables: model, view.');
      console.log('Call html(view) to print the view as HTML');
      var context = repl.start({}).context;
      context.view = instance;
      context.model = model;
      context.collection = collection;
      context.Shim = Cato.Shim;
      context.html = function(i) {
        // if available, use the prettyprinter
        if(html) {
          console.log(html(Cato.Shim.html(instance)));
        } else {
          console.log(Cato.Shim.html(instance));
        }
      };
    }
  }
}
